import com.azure.core.credential.TokenCredential;
import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.resourcemanager.AzureResourceManager;
import com.azure.resourcemanager.containerservice.models.KubernetesClusterAgentPoolProfile;
import com.azure.resourcemanager.containerservice.models.KubernetesClusterImpl;
import com.azure.resourcemanager.containerservice.models.ManagedClusterAddonProfile;
import com.azure.resourcemanager.containerservice.models.ManagedClusterServicePrincipalProfile;
import com.azure.resourcemanager.containerservice.models.NetworkProfile;
import com.azure.resourcemanager.containerservice.models.ServicePrincipalProfile;
import com.azure.resourcemanager.resources.fluentcore.arm.Region;

import java.util.concurrent.CompletableFuture;

public class CreateAksCluster {

    public static void main(String[] args) throws Exception {

        // Set up Azure credentials
        TokenCredential credential = new DefaultAzureCredentialBuilder().build();
        TokenRequestContext context = new TokenRequestContext().addScopes("https://management.azure.com/.default");
        String subscriptionId = "<your-subscription-id>";
        AzureResourceManager azure = AzureResourceManager
                .configure()
                .withLogLevel(com.azure.core.management.AzureEnvironment.AzureSdkLogLevel.BODY_AND_HEADERS)
                .authenticate(credential, context)
                .withSubscription(subscriptionId);

        // Set up AKS cluster configuration
        String resourceGroupName = "<your-resource-group-name>";
        String clusterName = "<your-cluster-name>";
        Region region = Region.US_WEST;
        int nodeCount = 3;
        String nodeSize = "Standard_D2s_v3";
        String kubernetesVersion = "1.21.5";
        String dnsPrefix = "<your-dns-prefix>";

        KubernetesClusterAgentPoolProfile agentPoolProfile = new KubernetesClusterAgentPoolProfile()
                .withName("agentpool1")
                .withCount(nodeCount)
                .withVmSize(nodeSize);

        NetworkProfile networkProfile = new NetworkProfile();

        ManagedClusterAddonProfile addonProfile = new ManagedClusterAddonProfile();
        addonProfile.withOmsagentEnabled(false);

        ServicePrincipalProfile servicePrincipalProfile = new ServicePrincipalProfile();
        servicePrincipalProfile.withClientId("<your-service-principal-client-id>");
        servicePrincipalProfile.withSecret("<your-service-principal-secret>");

        ManagedClusterServicePrincipalProfile managedClusterServicePrincipalProfile = new ManagedClusterServicePrincipalProfile();
        managedClusterServicePrincipalProfile.withClientId("<your-service-principal-client-id>");
        managedClusterServicePrincipalProfile.withSecret("<your-service-principal-secret>");

        // Create AKS cluster
        CompletableFuture<KubernetesClusterImpl> clusterFuture = azure.kubernetesClusters()
                .define(clusterName)
                .withRegion(region)
                .withExistingResourceGroup(resourceGroupName)
                .withDefaultVersion()
                .withServicePrincipalClientId(servicePrincipalProfile.clientId())
                .withServicePrincipalSecret(servicePrincipalProfile.secret())
                .withDnsPrefix(dnsPrefix)
                .withNetworkProfile(networkProfile)
                .withAgentPoolProfiles(agentPoolProfile)
                .withKubernetesVersion(kubernetesVersion)
                .withServicePrincipalManagedIdentity(managedClusterServicePrincipalProfile)
                .withAddonProfiles(addonProfile)
                .createAsync();

        // Wait for AKS cluster to be provisioned
        KubernetesClusterImpl cluster = clusterFuture.get();

        // Retrieve AKS cluster credentials
        String kubeConfig = cluster.getAdminKubeConfigContentAsync().get();
        System.out.println(kubeConfig);

        // Clean up resources
        azure.kubernetesClusters().deleteById(cluster.id());
    }
}
